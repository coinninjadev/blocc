variables:
  CONTAINER_BRANCH_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
  CONTAINER_LATEST_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:latest
  CONTAINER_TAGGED_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_TAG
  DOCKER_HOST: tcp://127.0.0.1:2375

cache:
  paths:
    - .cache

stages:
  - test
  - build
  - testing
  - prod

.docker-build: &docker-build
  stage: build
  allow_failure: false
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  services:
    - docker:dind

# Common k8s elements
.k8s: &k8s
  image: google/cloud-sdk:latest
  allow_failure: false
  before_script:
    - echo -n "${__k8s_prod_sa_key}" | base64 -d > /tmp/key.json
    - gcloud auth activate-service-account --key-file /tmp/key.json
    - gcloud config set project coinninja-prod
    - gcloud config set compute/zone us-central1-c
    - gcloud container clusters get-credentials prod-01
    - kubectl config current-context

test:
  stage: test
  image: golang:1.11-alpine3.8
  script:
    - apk add --update-cache make git protobuf protobuf-dev curl
    - mkdir -p .cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - export PATH=$PATH:$GOPATH/bin
    - CGO_ENABLED=0 make test

latest:
  <<: *docker-build
  script:
    - docker build --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --pull --tag $CONTAINER_LATEST_IMAGE .
    - docker push $CONTAINER_LATEST_IMAGE
  only:
    - develop@backend/blocc

branch:
  <<: *docker-build
  script:
    - docker build --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --pull --tag $CONTAINER_BRANCH_IMAGE .
    - docker push $CONTAINER_BRANCH_IMAGE
  when: manual
  only:
    - branches@backend/blocc
  except:
    - master
    - develop
    - tags

tagged:
  <<: *docker-build
  script:
    - docker build --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --pull --tag $CONTAINER_TAGGED_IMAGE .
    - docker push $CONTAINER_TAGGED_IMAGE
  only:
    - tags@backend/blocc
  except:
    - branches

production-server:tagged:
  <<: *k8s
  stage: prod
  environment:
    name: prod
    url: https://api.coinninja.net/api/v1/block/info
  script: |
    export CURRENT_IMAGE=$(kubectl -n indexer get deployment blocc-server -o=jsonpath='{$.spec.template.spec.containers[:1].image}')
    if [[ "${CURRENT_IMAGE}" != "${CONTAINER_TAGGED_IMAGE}" ]]; then
      echo "current image '${CURRENT_IMAGE}' is not '${CONTAINER_TAGGED_IMAGE}'"
      kubectl -n indexer set image deployment/blocc-server blocc=${CONTAINER_TAGGED_IMAGE} --record
    else
      echo "current image '${CURRENT_IMAGE}' is correct. Patching..."
      kubectl --namespace=indexer patch deployment blocc-server -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" --record
    fi
    kubectl -n indexer rollout status deployment blocc-server -w
  when: manual
  only:
    - tags@backend/blocc
  except:
    - branches

production-btc-block:tagged:
  <<: *k8s
  stage: prod
  environment:
    name: prod
    url: https://api.coinninja.net/api/v1/block/info
  script: |
    export CURRENT_IMAGE=$(kubectl -n indexer get deployment blocc-btc-block -o=jsonpath='{$.spec.template.spec.containers[:1].image}')
    if [[ "${CURRENT_IMAGE}" != "${CONTAINER_TAGGED_IMAGE}" ]]; then
      echo "current image '${CURRENT_IMAGE}' is not '${CONTAINER_TAGGED_IMAGE}'"
      kubectl -n indexer set image deployment/blocc-btc-block blocc=${CONTAINER_TAGGED_IMAGE} --record
    else
      echo "current image '${CURRENT_IMAGE}' is correct. Patching..."
      kubectl --namespace=indexer patch deployment blocc-btc-block -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" --record
    fi
    kubectl -n indexer rollout status deployment blocc-btc-block -w
  when: manual
  only:
    - tags@backend/blocc
  except:
    - branches

production-btc-transaction:tagged:
  <<: *k8s
  stage: prod
  environment:
    name: prod
    url: https://api.coinninja.net/api/v1/block/info
  script: |
    export CURRENT_IMAGE=$(kubectl -n indexer get deployment blocc-btc-transaction -o=jsonpath='{$.spec.template.spec.containers[:1].image}')
    if [[ "${CURRENT_IMAGE}" != "${CONTAINER_TAGGED_IMAGE}" ]]; then
      echo "current image '${CURRENT_IMAGE}' is not '${CONTAINER_TAGGED_IMAGE}'"
      kubectl -n indexer set image deployment/blocc-btc-transaction blocc=${CONTAINER_TAGGED_IMAGE} --record
    else
      echo "current image '${CURRENT_IMAGE}' is correct. Patching..."
      kubectl --namespace=indexer patch deployment blocc-btc-transaction -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" --record
    fi
    kubectl -n indexer rollout status deployment blocc-btc-transaction -w
  when: manual
  only:
    - tags@backend/blocc
  except:
    - branches
