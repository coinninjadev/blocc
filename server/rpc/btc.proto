syntax="proto3";
package rpc;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

import "google/api/annotations.proto";
// import "blocc/block.proto";

option go_package = "git.coinninja.net/backend/blocc/server/rpc";

// service BTCRPC {

//     rpc GetMemPoolStats(Symbol) returns (MemPoolStats) {
//         option (google.api.http) = {
//             get: "/mempool/stats"
//         };
//     }

//     rpc GetMemPoolStream(Symbol) returns (stream blocc.Tx) {
//         option (google.api.http) = {
//             get: "/mempool/stream"
//         };
//     }

// }

message BTCBlock {
    string hash = 1;
    int32 stripped_size = 2 [(gogoproto.jsontag) = "strippedsize"];
    int32 size = 3;
    int32 weight = 4;
    int64 height = 5;
    int32 version = 6;
    string version_hex = 7 [(gogoproto.jsontag) = "versionHex"];
    string merkle_root = 8 [(gogoproto.jsontag) = "merkleroot"];
    int64 time = 9;
    uint32 nonce = 10;
    string bits = 11;
    double difficulty = 12;
    string prev_hash = 13 [(gogoproto.jsontag) = "previousblockhash"];
    string next_hash = 14 [(gogoproto.jsontag) = "nextblockhash"];
    repeated string tx = 15;
}

// This describes a bitcoin transaction
message BTCTx {
    // These are the fields in the transaction
    int32 version = 1;
    string hash = 2;
    string txid = 3;
    int32 size = 4;
    int32 vsize = 5;
    int32 weight = 6;
    int64 lock_time = 7 [(gogoproto.jsontag) = "locktime"];
    int64 time = 8;
    repeated BTCTxIn vin = 9;
    repeated BTCTxOut vout = 10;
// These are calculated/generated fields
    int64 received_time = 16;
    string block_hash = 17 [(gogoproto.jsontag) = "blockhash"];
    int32 block_height = 18 [(gogoproto.jsontag) = "blockheight"];
    int64 block_time = 19 [(gogoproto.jsontag) = "blocktime"];
    bool coin_base = 20 [(gogoproto.jsontag) = "coinbase"];
    int32 height = 22;
}

// TxIn is an input from a transaction
message BTCTxIn {
    // These are the native fields of the transaction
    string txid = 1;
    uint32 vout = 2;
    BTCScriptSig sig_script = 4;
    repeated string txwitness = 5;
    uint32 sequence = 6;
    string coinbase = 7;
    BTCTxOut previous_output = 8 [(gogoproto.jsontag) = "previousoutput"];
}

// BTCScriptSig is an input for a TxIn
message BTCScriptSig {
    string hex = 1;
    string asm = 2;
}

message BTCTxOut {
    int64 value = 1;
    int64 height = 2 [(gogoproto.jsontag) = "n"];
    BTCScriptPubKey script_pk = 3;
}

message BTCScriptPubKey {
    string hex = 1;
    string asm = 2;
    int32 req_sigs = 3 [(gogoproto.jsontag) = "reqsigs"];
    string type = 4;
    repeated string addresses = 5;
}
