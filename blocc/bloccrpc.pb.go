// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blocc/bloccrpc.proto

package blocc

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Symbol
type Symbol struct {
	// The coin symbol (default: btc)
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *Symbol) Reset()      { *m = Symbol{} }
func (*Symbol) ProtoMessage() {}
func (*Symbol) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9e048c06e054ff, []int{0}
}
func (m *Symbol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Symbol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Symbol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Symbol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Symbol.Merge(m, src)
}
func (m *Symbol) XXX_Size() int {
	return m.Size()
}
func (m *Symbol) XXX_DiscardUnknown() {
	xxx_messageInfo_Symbol.DiscardUnknown(m)
}

var xxx_messageInfo_Symbol proto.InternalMessageInfo

func (m *Symbol) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

// Get
type Get struct {
	// The coin symbol (default: btc)
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The Id to get
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Extra flags for including fields
	// Bitmask of fields to include (1=header)
	Include int32 `protobuf:"varint,99,opt,name=include,proto3" json:"include,omitempty"`
	// Include the data object
	Data bool `protobuf:"varint,100,opt,name=data,proto3" json:"data,omitempty"`
	// Include the raw tx or block in base64
	Raw bool `protobuf:"varint,101,opt,name=raw,proto3" json:"raw,omitempty"`
	// Include transaction ids in block
	Tx bool `protobuf:"varint,102,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *Get) Reset()      { *m = Get{} }
func (*Get) ProtoMessage() {}
func (*Get) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9e048c06e054ff, []int{1}
}
func (m *Get) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Get) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Get.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Get) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Get.Merge(m, src)
}
func (m *Get) XXX_Size() int {
	return m.Size()
}
func (m *Get) XXX_DiscardUnknown() {
	xxx_messageInfo_Get.DiscardUnknown(m)
}

var xxx_messageInfo_Get proto.InternalMessageInfo

func (m *Get) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Get) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Get) GetInclude() int32 {
	if m != nil {
		return m.Include
	}
	return 0
}

func (m *Get) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

func (m *Get) GetRaw() bool {
	if m != nil {
		return m.Raw
	}
	return false
}

func (m *Get) GetTx() bool {
	if m != nil {
		return m.Tx
	}
	return false
}

// Find
type Find struct {
	// The coin symbol (default: btc)
	Symbol string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Ids    []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	// The start time to search from (unix timestamp)
	StartTime int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time to search to (unix timestamp)
	EndTime int64 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The offset of results to start from
	Offset int64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// The number of results to return
	Count int64 `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	// Extra flags for including fields
	// Sepecific values
	Include int32 `protobuf:"varint,99,opt,name=include,proto3" json:"include,omitempty"`
	// Include the data object
	Data bool `protobuf:"varint,100,opt,name=data,proto3" json:"data,omitempty"`
	// Include the raw tx or block in base64
	Raw bool `protobuf:"varint,101,opt,name=raw,proto3" json:"raw,omitempty"`
	// Include transaction ids in block
	Tx bool `protobuf:"varint,102,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *Find) Reset()      { *m = Find{} }
func (*Find) ProtoMessage() {}
func (*Find) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9e048c06e054ff, []int{2}
}
func (m *Find) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Find) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Find.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Find) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Find.Merge(m, src)
}
func (m *Find) XXX_Size() int {
	return m.Size()
}
func (m *Find) XXX_DiscardUnknown() {
	xxx_messageInfo_Find.DiscardUnknown(m)
}

var xxx_messageInfo_Find proto.InternalMessageInfo

func (m *Find) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Find) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *Find) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Find) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Find) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Find) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Find) GetInclude() int32 {
	if m != nil {
		return m.Include
	}
	return 0
}

func (m *Find) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

func (m *Find) GetRaw() bool {
	if m != nil {
		return m.Raw
	}
	return false
}

func (m *Find) GetTx() bool {
	if m != nil {
		return m.Tx
	}
	return false
}

// Blocks
type Blocks struct {
	// Blocks
	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (m *Blocks) Reset()      { *m = Blocks{} }
func (*Blocks) ProtoMessage() {}
func (*Blocks) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9e048c06e054ff, []int{3}
}
func (m *Blocks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Blocks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Blocks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Blocks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blocks.Merge(m, src)
}
func (m *Blocks) XXX_Size() int {
	return m.Size()
}
func (m *Blocks) XXX_DiscardUnknown() {
	xxx_messageInfo_Blocks.DiscardUnknown(m)
}

var xxx_messageInfo_Blocks proto.InternalMessageInfo

func (m *Blocks) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// Transactions
type Transactions struct {
	// Transactions
	Transactions []*Tx `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (m *Transactions) Reset()      { *m = Transactions{} }
func (*Transactions) ProtoMessage() {}
func (*Transactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9e048c06e054ff, []int{4}
}
func (m *Transactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transactions.Merge(m, src)
}
func (m *Transactions) XXX_Size() int {
	return m.Size()
}
func (m *Transactions) XXX_DiscardUnknown() {
	xxx_messageInfo_Transactions.DiscardUnknown(m)
}

var xxx_messageInfo_Transactions proto.InternalMessageInfo

func (m *Transactions) GetTransactions() []*Tx {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// MemPoolStats
type MemPoolStats struct {
	// The timestamp
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// The count of transactions
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// The mempool size
	MPSize int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *MemPoolStats) Reset()      { *m = MemPoolStats{} }
func (*MemPoolStats) ProtoMessage() {}
func (*MemPoolStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9e048c06e054ff, []int{5}
}
func (m *MemPoolStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemPoolStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemPoolStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemPoolStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemPoolStats.Merge(m, src)
}
func (m *MemPoolStats) XXX_Size() int {
	return m.Size()
}
func (m *MemPoolStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MemPoolStats.DiscardUnknown(m)
}

var xxx_messageInfo_MemPoolStats proto.InternalMessageInfo

func (m *MemPoolStats) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MemPoolStats) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *MemPoolStats) GetMPSize() int64 {
	if m != nil {
		return m.MPSize
	}
	return 0
}

func init() {
	proto.RegisterType((*Symbol)(nil), "blocc.Symbol")
	proto.RegisterType((*Get)(nil), "blocc.Get")
	proto.RegisterType((*Find)(nil), "blocc.Find")
	proto.RegisterType((*Blocks)(nil), "blocc.Blocks")
	proto.RegisterType((*Transactions)(nil), "blocc.Transactions")
	proto.RegisterType((*MemPoolStats)(nil), "blocc.MemPoolStats")
}

func init() { proto.RegisterFile("blocc/bloccrpc.proto", fileDescriptor_0c9e048c06e054ff) }

var fileDescriptor_0c9e048c06e054ff = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xbf, 0x6f, 0x23, 0x45,
	0x14, 0xf6, 0xd8, 0xb1, 0x63, 0xbf, 0xf3, 0x25, 0xce, 0xcb, 0x5d, 0xd8, 0x4b, 0xb8, 0xc5, 0x1a,
	0x81, 0x30, 0xa0, 0x78, 0xe0, 0xe8, 0x90, 0x28, 0x30, 0x12, 0xa6, 0x39, 0x29, 0xda, 0xa4, 0x40,
	0x4b, 0x01, 0xeb, 0xdd, 0xb1, 0x19, 0xce, 0xde, 0x89, 0xbc, 0x13, 0xe1, 0xdc, 0x29, 0x12, 0x82,
	0x1e, 0x21, 0x21, 0x44, 0x4d, 0xc7, 0x9f, 0x42, 0x41, 0x11, 0x89, 0xe6, 0x2a, 0x44, 0x36, 0x14,
	0x57, 0xde, 0x9f, 0x80, 0xe6, 0xed, 0xfa, 0xbc, 0x9b, 0x5c, 0x24, 0x0a, 0x9a, 0xe8, 0xbd, 0xef,
	0x7b, 0xbf, 0xbe, 0xf7, 0x26, 0x5e, 0xb8, 0x33, 0x9a, 0xea, 0x30, 0x14, 0xf4, 0x77, 0x7e, 0x1c,
	0xf6, 0x8f, 0xe7, 0xda, 0x68, 0xac, 0x93, 0xbf, 0xbb, 0x3f, 0x51, 0xe6, 0xab, 0x93, 0x51, 0x3f,
	0xd4, 0x33, 0x31, 0xd1, 0x13, 0x2d, 0x88, 0x1d, 0x9d, 0x8c, 0xc9, 0x23, 0x87, 0xac, 0x2c, 0x6b,
	0xf7, 0xd5, 0x89, 0xd6, 0x93, 0xa9, 0x14, 0xc1, 0xb1, 0x12, 0x41, 0x1c, 0x6b, 0x13, 0x18, 0xa5,
	0xe3, 0x24, 0x67, 0xb7, 0x0a, 0x9d, 0x32, 0x88, 0x77, 0xa1, 0x71, 0x78, 0x3a, 0x1b, 0xe9, 0x29,
	0xee, 0x40, 0x23, 0x21, 0xcb, 0x61, 0x5d, 0xd6, 0x6b, 0x79, 0xb9, 0xc7, 0xcf, 0xa0, 0x36, 0x94,
	0xe6, 0x26, 0x1a, 0x37, 0xa0, 0xaa, 0x22, 0xa7, 0x4a, 0x58, 0x55, 0x45, 0xe8, 0xc0, 0xba, 0x8a,
	0xc3, 0xe9, 0x49, 0x24, 0x9d, 0xb0, 0xcb, 0x7a, 0x75, 0x6f, 0xe9, 0x22, 0xc2, 0x5a, 0x14, 0x98,
	0xc0, 0x89, 0xba, 0xac, 0xd7, 0xf4, 0xc8, 0xc6, 0x0e, 0xd4, 0xe6, 0xc1, 0x37, 0x8e, 0x24, 0xc8,
	0x9a, 0xb6, 0x9e, 0x59, 0x38, 0x63, 0x02, 0xaa, 0x66, 0xc1, 0x9f, 0x31, 0x58, 0xfb, 0x44, 0xc5,
	0xd1, 0x8d, 0x03, 0x74, 0xa0, 0xa6, 0xa2, 0xc4, 0xa9, 0x76, 0x6b, 0xbd, 0x96, 0x67, 0x4d, 0xbc,
	0x0f, 0x90, 0x98, 0x60, 0x6e, 0xbe, 0x30, 0x6a, 0x26, 0x9d, 0x5a, 0x97, 0xf5, 0x6a, 0x5e, 0x8b,
	0x90, 0x23, 0x35, 0x93, 0x78, 0x0f, 0x9a, 0x32, 0x8e, 0x32, 0x72, 0x8d, 0xc8, 0x75, 0x19, 0x47,
	0x44, 0xed, 0x40, 0x43, 0x8f, 0xc7, 0x89, 0x34, 0x4e, 0x9d, 0x88, 0xdc, 0xc3, 0x3b, 0x50, 0x0f,
	0xf5, 0x49, 0x6c, 0x9c, 0x06, 0xc1, 0x99, 0xf3, 0xbf, 0x4b, 0xed, 0x43, 0x63, 0x30, 0xd5, 0xe1,
	0xa3, 0x04, 0x5f, 0x87, 0xc6, 0x88, 0x2c, 0x87, 0x75, 0x6b, 0xbd, 0x5b, 0x0f, 0xda, 0xfd, 0xec,
	0x66, 0x44, 0x7b, 0x39, 0xc7, 0x3f, 0x84, 0xf6, 0xd1, 0x3c, 0x88, 0x93, 0x20, 0xa4, 0x23, 0xe3,
	0x3e, 0xb4, 0x4d, 0xc1, 0xcf, 0x73, 0x5b, 0x79, 0xee, 0xd1, 0xc2, 0x2b, 0xd1, 0xfc, 0x33, 0x68,
	0x3f, 0x94, 0xb3, 0x03, 0xad, 0xa7, 0x87, 0x26, 0x30, 0x89, 0x1d, 0x9a, 0x76, 0xc2, 0x48, 0x23,
	0xd9, 0x2b, 0xe1, 0xd5, 0xa2, 0x70, 0x17, 0xd6, 0x12, 0xf5, 0x38, 0x5f, 0xed, 0x00, 0xd2, 0xbf,
	0x5e, 0x6b, 0x3c, 0x3c, 0x38, 0x54, 0x8f, 0xa5, 0x47, 0xf8, 0x83, 0x5f, 0xd6, 0xa1, 0x69, 0x47,
	0x0d, 0xbd, 0x83, 0x8f, 0xf1, 0x10, 0x9a, 0x43, 0x69, 0x68, 0x72, 0x84, 0x7c, 0x96, 0xa1, 0x34,
	0xbb, 0x25, 0x4d, 0x7c, 0xff, 0xbb, 0x3f, 0xff, 0xf9, 0xa9, 0xfa, 0x26, 0xb6, 0x45, 0x26, 0x4e,
	0x3c, 0x51, 0xd1, 0x99, 0xff, 0x0a, 0xde, 0x15, 0x4f, 0xb2, 0x3b, 0x9f, 0x15, 0x09, 0x9c, 0x03,
	0xd8, 0x47, 0x91, 0xaf, 0xeb, 0x56, 0x5e, 0xca, 0x42, 0xbb, 0xb7, 0x8b, 0x75, 0x13, 0xfe, 0x29,
	0x15, 0x1e, 0xf0, 0xf5, 0x3c, 0xff, 0x03, 0xf6, 0xb6, 0x7f, 0x97, 0x77, 0xae, 0x96, 0xb5, 0x70,
	0x0b, 0x97, 0x41, 0x3e, 0xe2, 0xb5, 0x08, 0xfc, 0x9e, 0xc1, 0xc6, 0x50, 0x9a, 0xc2, 0xca, 0x4b,
	0x7a, 0x56, 0x7b, 0xe6, 0x3e, 0xf5, 0x3c, 0x42, 0x14, 0xc5, 0x85, 0x67, 0x92, 0xee, 0xe3, 0xde,
	0xaa, 0xf2, 0x75, 0x1a, 0xb0, 0x29, 0xcc, 0x22, 0xb3, 0xb7, 0x71, 0xab, 0x10, 0x9a, 0x81, 0xf8,
	0x07, 0x83, 0x8e, 0xd5, 0x59, 0xba, 0x7c, 0x69, 0x01, 0xdb, 0xcb, 0x41, 0x8a, 0xc7, 0xfe, 0x99,
	0xd1, 0x4c, 0x3f, 0x30, 0x7e, 0xbb, 0xd4, 0xd5, 0xea, 0xde, 0xe3, 0x3b, 0x2f, 0x1f, 0xc9, 0x92,
	0x9b, 0x58, 0x4e, 0xf0, 0x1d, 0xbc, 0x21, 0xda, 0x6f, 0xf2, 0x9a, 0x30, 0x0b, 0x9b, 0xb4, 0xc5,
	0xdb, 0xc5, 0xc9, 0x2d, 0x54, 0x47, 0x4b, 0xfa, 0x1b, 0x58, 0x62, 0xf0, 0x57, 0x06, 0x7b, 0x57,
	0xe5, 0x0c, 0x4e, 0x3f, 0x8a, 0xa2, 0xb9, 0x4c, 0x12, 0xf9, 0x5f, 0x94, 0x7d, 0x49, 0xc2, 0x7c,
	0x0e, 0x22, 0x58, 0x66, 0xd9, 0x7e, 0x0e, 0xdf, 0x5e, 0x35, 0x2a, 0x31, 0xf6, 0xb6, 0x2f, 0x00,
	0xbb, 0xd4, 0xe4, 0xcc, 0xdf, 0xc3, 0x7b, 0x2f, 0x89, 0xce, 0x48, 0x1c, 0xc3, 0xe6, 0x50, 0x9a,
	0xd2, 0xff, 0xca, 0xf2, 0x91, 0x65, 0xbf, 0x9d, 0x2f, 0x06, 0x2b, 0xc6, 0x70, 0x41, 0x83, 0xbd,
	0x85, 0x1b, 0x62, 0x26, 0x67, 0xc7, 0x5a, 0x4f, 0x45, 0x62, 0x71, 0x7a, 0xd4, 0x53, 0x39, 0x09,
	0xc2, 0xd3, 0x32, 0x81, 0x01, 0x74, 0x8a, 0x7d, 0xe6, 0x32, 0x98, 0x5d, 0x6d, 0x54, 0x78, 0x64,
	0xef, 0x51, 0xf9, 0x77, 0x70, 0xb3, 0x50, 0xc5, 0xa6, 0xd0, 0x81, 0xae, 0xd5, 0xb7, 0xcc, 0xbb,
	0x6c, 0xf0, 0xf9, 0xf9, 0x85, 0x5b, 0x79, 0x7a, 0xe1, 0x56, 0x9e, 0x5f, 0xb8, 0xec, 0xdb, 0xd4,
	0x65, 0xbf, 0xa5, 0x2e, 0xfb, 0x3d, 0x75, 0xd9, 0x79, 0xea, 0xb2, 0xbf, 0x53, 0x97, 0x3d, 0x4b,
	0xdd, 0xca, 0xf3, 0xd4, 0x65, 0x3f, 0x5e, 0xba, 0x95, 0xf3, 0x4b, 0xb7, 0xf2, 0xf4, 0xd2, 0xad,
	0xf8, 0x6f, 0x4c, 0x94, 0xe9, 0x87, 0x5a, 0xc5, 0xb1, 0x8a, 0xbf, 0x0e, 0xfa, 0xb1, 0x34, 0x62,
	0x14, 0x84, 0x8f, 0x64, 0x1c, 0x89, 0xc2, 0x17, 0x65, 0xd4, 0xa0, 0x4f, 0xca, 0xfb, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x62, 0x9e, 0x25, 0x9c, 0xd1, 0x06, 0x00, 0x00,
}

func (this *Symbol) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Symbol)
	if !ok {
		that2, ok := that.(Symbol)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	return true
}
func (this *Get) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Get)
	if !ok {
		that2, ok := that.(Get)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Include != that1.Include {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.Raw != that1.Raw {
		return false
	}
	if this.Tx != that1.Tx {
		return false
	}
	return true
}
func (this *Find) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Find)
	if !ok {
		that2, ok := that.(Find)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Include != that1.Include {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.Raw != that1.Raw {
		return false
	}
	if this.Tx != that1.Tx {
		return false
	}
	return true
}
func (this *Blocks) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Blocks)
	if !ok {
		that2, ok := that.(Blocks)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !this.Blocks[i].Equal(that1.Blocks[i]) {
			return false
		}
	}
	return true
}
func (this *Transactions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Transactions)
	if !ok {
		that2, ok := that.(Transactions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	return true
}
func (this *MemPoolStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MemPoolStats)
	if !ok {
		that2, ok := that.(MemPoolStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.MPSize != that1.MPSize {
		return false
	}
	return true
}
func (this *Symbol) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blocc.Symbol{")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Get) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&blocc.Get{")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Include: "+fmt.Sprintf("%#v", this.Include)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	s = append(s, "Tx: "+fmt.Sprintf("%#v", this.Tx)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Find) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&blocc.Find{")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "Ids: "+fmt.Sprintf("%#v", this.Ids)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Include: "+fmt.Sprintf("%#v", this.Include)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	s = append(s, "Tx: "+fmt.Sprintf("%#v", this.Tx)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Blocks) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blocc.Blocks{")
	if this.Blocks != nil {
		s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Transactions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&blocc.Transactions{")
	if this.Transactions != nil {
		s = append(s, "Transactions: "+fmt.Sprintf("%#v", this.Transactions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MemPoolStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&blocc.MemPoolStats{")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "MPSize: "+fmt.Sprintf("%#v", this.MPSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBloccrpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BloccRPCClient is the client API for BloccRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BloccRPCClient interface {
	// Get Block by Id
	GetBlock(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Block, error)
	// Find Blocks by BlockIds and/or Time
	FindBlocks(ctx context.Context, in *Find, opts ...grpc.CallOption) (*Blocks, error)
	// Get Transaction by TxId
	GetTransaction(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Tx, error)
	// Find transactions by TxId and/or Time
	FindTransactions(ctx context.Context, in *Find, opts ...grpc.CallOption) (*Transactions, error)
	// Find transactions by Address and/or Time
	FindTransactionsByAddresses(ctx context.Context, in *Find, opts ...grpc.CallOption) (*Transactions, error)
	// Get MemPool Stats
	GetMemPoolStats(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*MemPoolStats, error)
	// Get Transaction Stream
	GetMemPoolStream(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (BloccRPC_GetMemPoolStreamClient, error)
}

type bloccRPCClient struct {
	cc *grpc.ClientConn
}

func NewBloccRPCClient(cc *grpc.ClientConn) BloccRPCClient {
	return &bloccRPCClient{cc}
}

func (c *bloccRPCClient) GetBlock(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/blocc.BloccRPC/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloccRPCClient) FindBlocks(ctx context.Context, in *Find, opts ...grpc.CallOption) (*Blocks, error) {
	out := new(Blocks)
	err := c.cc.Invoke(ctx, "/blocc.BloccRPC/FindBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloccRPCClient) GetTransaction(ctx context.Context, in *Get, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, "/blocc.BloccRPC/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloccRPCClient) FindTransactions(ctx context.Context, in *Find, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := c.cc.Invoke(ctx, "/blocc.BloccRPC/FindTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloccRPCClient) FindTransactionsByAddresses(ctx context.Context, in *Find, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := c.cc.Invoke(ctx, "/blocc.BloccRPC/FindTransactionsByAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloccRPCClient) GetMemPoolStats(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (*MemPoolStats, error) {
	out := new(MemPoolStats)
	err := c.cc.Invoke(ctx, "/blocc.BloccRPC/GetMemPoolStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloccRPCClient) GetMemPoolStream(ctx context.Context, in *Symbol, opts ...grpc.CallOption) (BloccRPC_GetMemPoolStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BloccRPC_serviceDesc.Streams[0], "/blocc.BloccRPC/GetMemPoolStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bloccRPCGetMemPoolStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BloccRPC_GetMemPoolStreamClient interface {
	Recv() (*Tx, error)
	grpc.ClientStream
}

type bloccRPCGetMemPoolStreamClient struct {
	grpc.ClientStream
}

func (x *bloccRPCGetMemPoolStreamClient) Recv() (*Tx, error) {
	m := new(Tx)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BloccRPCServer is the server API for BloccRPC service.
type BloccRPCServer interface {
	// Get Block by Id
	GetBlock(context.Context, *Get) (*Block, error)
	// Find Blocks by BlockIds and/or Time
	FindBlocks(context.Context, *Find) (*Blocks, error)
	// Get Transaction by TxId
	GetTransaction(context.Context, *Get) (*Tx, error)
	// Find transactions by TxId and/or Time
	FindTransactions(context.Context, *Find) (*Transactions, error)
	// Find transactions by Address and/or Time
	FindTransactionsByAddresses(context.Context, *Find) (*Transactions, error)
	// Get MemPool Stats
	GetMemPoolStats(context.Context, *Symbol) (*MemPoolStats, error)
	// Get Transaction Stream
	GetMemPoolStream(*Symbol, BloccRPC_GetMemPoolStreamServer) error
}

func RegisterBloccRPCServer(s *grpc.Server, srv BloccRPCServer) {
	s.RegisterService(&_BloccRPC_serviceDesc, srv)
}

func _BloccRPC_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloccRPCServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blocc.BloccRPC/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloccRPCServer).GetBlock(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloccRPC_FindBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Find)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloccRPCServer).FindBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blocc.BloccRPC/FindBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloccRPCServer).FindBlocks(ctx, req.(*Find))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloccRPC_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloccRPCServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blocc.BloccRPC/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloccRPCServer).GetTransaction(ctx, req.(*Get))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloccRPC_FindTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Find)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloccRPCServer).FindTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blocc.BloccRPC/FindTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloccRPCServer).FindTransactions(ctx, req.(*Find))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloccRPC_FindTransactionsByAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Find)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloccRPCServer).FindTransactionsByAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blocc.BloccRPC/FindTransactionsByAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloccRPCServer).FindTransactionsByAddresses(ctx, req.(*Find))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloccRPC_GetMemPoolStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Symbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloccRPCServer).GetMemPoolStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blocc.BloccRPC/GetMemPoolStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloccRPCServer).GetMemPoolStats(ctx, req.(*Symbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _BloccRPC_GetMemPoolStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Symbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BloccRPCServer).GetMemPoolStream(m, &bloccRPCGetMemPoolStreamServer{stream})
}

type BloccRPC_GetMemPoolStreamServer interface {
	Send(*Tx) error
	grpc.ServerStream
}

type bloccRPCGetMemPoolStreamServer struct {
	grpc.ServerStream
}

func (x *bloccRPCGetMemPoolStreamServer) Send(m *Tx) error {
	return x.ServerStream.SendMsg(m)
}

var _BloccRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blocc.BloccRPC",
	HandlerType: (*BloccRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlock",
			Handler:    _BloccRPC_GetBlock_Handler,
		},
		{
			MethodName: "FindBlocks",
			Handler:    _BloccRPC_FindBlocks_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _BloccRPC_GetTransaction_Handler,
		},
		{
			MethodName: "FindTransactions",
			Handler:    _BloccRPC_FindTransactions_Handler,
		},
		{
			MethodName: "FindTransactionsByAddresses",
			Handler:    _BloccRPC_FindTransactionsByAddresses_Handler,
		},
		{
			MethodName: "GetMemPoolStats",
			Handler:    _BloccRPC_GetMemPoolStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMemPoolStream",
			Handler:       _BloccRPC_GetMemPoolStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blocc/bloccrpc.proto",
}

func (m *Symbol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Symbol) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	return i, nil
}

func (m *Get) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Get) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Include != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.Include))
	}
	if m.Data {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		if m.Data {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Raw {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x6
		i++
		if m.Raw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Tx {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x6
		i++
		if m.Tx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Find) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Find) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.EndTime))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.Offset))
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.Count))
	}
	if m.Include != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.Include))
	}
	if m.Data {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		if m.Data {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Raw {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x6
		i++
		if m.Raw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Tx {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x6
		i++
		if m.Tx {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Blocks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blocks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBloccrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Transactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transactions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBloccrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MemPoolStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemPoolStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.Time))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.Count))
	}
	if m.MPSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBloccrpc(dAtA, i, uint64(m.MPSize))
	}
	return i, nil
}

func encodeVarintBloccrpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Symbol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovBloccrpc(uint64(l))
	}
	return n
}

func (m *Get) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovBloccrpc(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBloccrpc(uint64(l))
	}
	if m.Include != 0 {
		n += 2 + sovBloccrpc(uint64(m.Include))
	}
	if m.Data {
		n += 3
	}
	if m.Raw {
		n += 3
	}
	if m.Tx {
		n += 3
	}
	return n
}

func (m *Find) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovBloccrpc(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovBloccrpc(uint64(l))
		}
	}
	if m.StartTime != 0 {
		n += 1 + sovBloccrpc(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovBloccrpc(uint64(m.EndTime))
	}
	if m.Offset != 0 {
		n += 1 + sovBloccrpc(uint64(m.Offset))
	}
	if m.Count != 0 {
		n += 1 + sovBloccrpc(uint64(m.Count))
	}
	if m.Include != 0 {
		n += 2 + sovBloccrpc(uint64(m.Include))
	}
	if m.Data {
		n += 3
	}
	if m.Raw {
		n += 3
	}
	if m.Tx {
		n += 3
	}
	return n
}

func (m *Blocks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovBloccrpc(uint64(l))
		}
	}
	return n
}

func (m *Transactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovBloccrpc(uint64(l))
		}
	}
	return n
}

func (m *MemPoolStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovBloccrpc(uint64(m.Time))
	}
	if m.Count != 0 {
		n += 1 + sovBloccrpc(uint64(m.Count))
	}
	if m.MPSize != 0 {
		n += 1 + sovBloccrpc(uint64(m.MPSize))
	}
	return n
}

func sovBloccrpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBloccrpc(x uint64) (n int) {
	return sovBloccrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Symbol) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Symbol{`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Get) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Get{`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Include:` + fmt.Sprintf("%v", this.Include) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Raw:` + fmt.Sprintf("%v", this.Raw) + `,`,
		`Tx:` + fmt.Sprintf("%v", this.Tx) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Find) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Find{`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`Ids:` + fmt.Sprintf("%v", this.Ids) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Include:` + fmt.Sprintf("%v", this.Include) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Raw:` + fmt.Sprintf("%v", this.Raw) + `,`,
		`Tx:` + fmt.Sprintf("%v", this.Tx) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Blocks) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Blocks{`,
		`Blocks:` + strings.Replace(fmt.Sprintf("%v", this.Blocks), "Block", "Block", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Transactions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transactions{`,
		`Transactions:` + strings.Replace(fmt.Sprintf("%v", this.Transactions), "Tx", "Tx", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MemPoolStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemPoolStats{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`MPSize:` + fmt.Sprintf("%v", this.MPSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBloccrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Symbol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBloccrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Symbol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Symbol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBloccrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBloccrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Get) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBloccrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Get: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Get: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBloccrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBloccrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			m.Include = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Include |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = bool(v != 0)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Raw = bool(v != 0)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tx = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBloccrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Find) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBloccrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Find: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Find: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBloccrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBloccrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			m.Include = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Include |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = bool(v != 0)
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Raw = bool(v != 0)
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tx = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBloccrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blocks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBloccrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBloccrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBloccrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBloccrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBloccrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Tx{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBloccrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemPoolStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBloccrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemPoolStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemPoolStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MPSize", wireType)
			}
			m.MPSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MPSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBloccrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBloccrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBloccrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBloccrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBloccrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBloccrpc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBloccrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBloccrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBloccrpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBloccrpc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBloccrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBloccrpc   = fmt.Errorf("proto: integer overflow")
)
