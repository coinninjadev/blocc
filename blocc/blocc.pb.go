// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blocc/blocc.proto

package blocc

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// BlockInclude
type BlockInclude int32

const (
	BlockIncludeDefault BlockInclude = 0
	BlockIncludeHeader  BlockInclude = 1
	BlockIncludeData    BlockInclude = 2
	BlockIncludeRaw     BlockInclude = 4
	BlockIncludeTxIds   BlockInclude = 8
)

var BlockInclude_name = map[int32]string{
	0: "BlockIncludeDefault",
	1: "BlockIncludeHeader",
	2: "BlockIncludeData",
	4: "BlockIncludeRaw",
	8: "BlockIncludeTxIds",
}

var BlockInclude_value = map[string]int32{
	"BlockIncludeDefault": 0,
	"BlockIncludeHeader":  1,
	"BlockIncludeData":    2,
	"BlockIncludeRaw":     4,
	"BlockIncludeTxIds":   8,
}

func (BlockInclude) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_297e677bdf07cca5, []int{0}
}

// TxInclude
type TxInclude int32

const (
	TxIncludeDefault TxInclude = 0
	TxIncludeHeader  TxInclude = 1
	TxIncludeData    TxInclude = 2
	TxIncludeRaw     TxInclude = 4
	TxIncludeIn      TxInclude = 8
	TxIncludeOut     TxInclude = 16
)

var TxInclude_name = map[int32]string{
	0:  "TxIncludeDefault",
	1:  "TxIncludeHeader",
	2:  "TxIncludeData",
	4:  "TxIncludeRaw",
	8:  "TxIncludeIn",
	16: "TxIncludeOut",
}

var TxInclude_value = map[string]int32{
	"TxIncludeDefault": 0,
	"TxIncludeHeader":  1,
	"TxIncludeData":    2,
	"TxIncludeRaw":     4,
	"TxIncludeIn":      8,
	"TxIncludeOut":     16,
}

func (TxInclude) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_297e677bdf07cca5, []int{1}
}

// BlockHeader
type BlockHeader struct {
	// Symbol
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Block Id
	BlockId string `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// Block Height
	Height int64 `protobuf:"varint,3,opt,name=height,proto3" json:"height"`
	// Previous Block Id
	PrevBlockId string `protobuf:"bytes,4,opt,name=prev_block_id,json=prevBlockId,proto3" json:"prev_block_id,omitempty"`
	// Block Time (unix timestamp)
	Time int64 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *BlockHeader) Reset()      { *m = BlockHeader{} }
func (*BlockHeader) ProtoMessage() {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_297e677bdf07cca5, []int{0}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(m, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *BlockHeader) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

func (m *BlockHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetPrevBlockId() string {
	if m != nil {
		return m.PrevBlockId
	}
	return ""
}

func (m *BlockHeader) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// Block
type Block struct {
	// Symbol
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Block Id
	BlockId string `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// Block Height
	Height int64 `protobuf:"varint,3,opt,name=height,proto3" json:"height"`
	// Previous Block Id
	PrevBlockId string `protobuf:"bytes,4,opt,name=prev_block_id,json=prevBlockId,proto3" json:"prev_block_id,omitempty"`
	// Next Block Id - if it can be determined
	NextBlockId string `protobuf:"bytes,5,opt,name=next_block_id,json=nextBlockId,proto3" json:"next_block_id,omitempty"`
	// Block Time (unix timestamp)
	Time int64 `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	// Tx Count
	TxCount int64 `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	// Size
	BlockSize int64 `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	// Status
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	// If data is missing to consider this block complete
	Incomplete bool `protobuf:"varint,10,opt,name=incomplete,proto3" json:"incomplete"`
	// Transaction Ids
	TxIds []string `protobuf:"bytes,11,rep,name=tx_ids,json=txIds,proto3" json:"tx_id"`
	// Raw Block Data (base64)
	Raw Raw `protobuf:"bytes,13,opt,name=raw,proto3,casttype=Raw" json:"raw,omitempty"`
	// Block Misc Data
	Data map[string]string `protobuf:"bytes,14,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Block Misc Metrics
	Metric map[string]float64 `protobuf:"bytes,15,rep,name=metric,proto3" json:"metric,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *Block) Reset()      { *m = Block{} }
func (*Block) ProtoMessage() {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_297e677bdf07cca5, []int{1}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Block.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Block) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetPrevBlockId() string {
	if m != nil {
		return m.PrevBlockId
	}
	return ""
}

func (m *Block) GetNextBlockId() string {
	if m != nil {
		return m.NextBlockId
	}
	return ""
}

func (m *Block) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Block) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *Block) GetBlockSize() int64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *Block) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Block) GetIncomplete() bool {
	if m != nil {
		return m.Incomplete
	}
	return false
}

func (m *Block) GetTxIds() []string {
	if m != nil {
		return m.TxIds
	}
	return nil
}

func (m *Block) GetRaw() Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Block) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Block) GetMetric() map[string]float64 {
	if m != nil {
		return m.Metric
	}
	return nil
}

// Tx - Transaction
type Tx struct {
	// Symbol
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Block Id
	BlockId string `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	// Block Height
	BlockHeight int64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Block Time
	BlockTime int64 `protobuf:"varint,4,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	// Transaction Id
	TxId string `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Transaction Height (in block)
	Height int64 `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	// Transaction Time
	Time int64 `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	// Size
	TxSize int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// If data is missing to consider this tx complete
	Incomplete bool `protobuf:"varint,10,opt,name=incomplete,proto3" json:"incomplete"`
	// Transaction Inputs
	In []*TxIn `protobuf:"bytes,11,rep,name=in,proto3" json:"in,omitempty"`
	// Transaction Outputs
	Out []*TxOut `protobuf:"bytes,12,rep,name=out,proto3" json:"out,omitempty"`
	// Raw Transaction Data (base64)
	Raw Raw `protobuf:"bytes,13,opt,name=raw,proto3,casttype=Raw" json:"raw,omitempty"`
	// Transaction Misc Data
	Data map[string]string `protobuf:"bytes,14,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Transaction Misc Metric
	Metric map[string]float64 `protobuf:"bytes,15,rep,name=metric,proto3" json:"metric,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *Tx) Reset()      { *m = Tx{} }
func (*Tx) ProtoMessage() {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_297e677bdf07cca5, []int{2}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Tx) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

func (m *Tx) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Tx) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Tx) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *Tx) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Tx) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Tx) GetTxSize() int64 {
	if m != nil {
		return m.TxSize
	}
	return 0
}

func (m *Tx) GetIncomplete() bool {
	if m != nil {
		return m.Incomplete
	}
	return false
}

func (m *Tx) GetIn() []*TxIn {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *Tx) GetOut() []*TxOut {
	if m != nil {
		return m.Out
	}
	return nil
}

func (m *Tx) GetRaw() Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Tx) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Tx) GetMetric() map[string]float64 {
	if m != nil {
		return m.Metric
	}
	return nil
}

// TxIn - Transaction Input
type TxIn struct {
	// Input/Previous Output Transaction Id
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Input Transaction Height Within Previous Output
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height"`
	// The Output of the previous transaction
	Out *TxOut `protobuf:"bytes,3,opt,name=out,proto3" json:"out,omitempty"`
	// Raw TxIn Data
	Raw Raw `protobuf:"bytes,13,opt,name=raw,proto3,casttype=Raw" json:"raw,omitempty"`
	// Transaction Input Misc Data
	Data map[string]string `protobuf:"bytes,14,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Transaction Input Misc Metrics
	Metric map[string]float64 `protobuf:"bytes,15,rep,name=metric,proto3" json:"metric,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *TxIn) Reset()      { *m = TxIn{} }
func (*TxIn) ProtoMessage() {}
func (*TxIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_297e677bdf07cca5, []int{3}
}
func (m *TxIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxIn.Merge(m, src)
}
func (m *TxIn) XXX_Size() int {
	return m.Size()
}
func (m *TxIn) XXX_DiscardUnknown() {
	xxx_messageInfo_TxIn.DiscardUnknown(m)
}

var xxx_messageInfo_TxIn proto.InternalMessageInfo

func (m *TxIn) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *TxIn) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxIn) GetOut() *TxOut {
	if m != nil {
		return m.Out
	}
	return nil
}

func (m *TxIn) GetRaw() Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *TxIn) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TxIn) GetMetric() map[string]float64 {
	if m != nil {
		return m.Metric
	}
	return nil
}

// TxOut - Transaction Output
type TxOut struct {
	// The TrOut Type
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Output addresses if they could be decoded
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"address"`
	// The value of the transaction output
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// Raw TxOut Data (base64)
	Raw Raw `protobuf:"bytes,13,opt,name=raw,proto3,casttype=Raw" json:"raw,omitempty"`
	// Transaction Output Misc Data
	Data map[string]string `protobuf:"bytes,14,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Transaction Output Misc Metrics
	Metric map[string]float64 `protobuf:"bytes,15,rep,name=metric,proto3" json:"metric,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (m *TxOut) Reset()      { *m = TxOut{} }
func (*TxOut) ProtoMessage() {}
func (*TxOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_297e677bdf07cca5, []int{4}
}
func (m *TxOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOut.Merge(m, src)
}
func (m *TxOut) XXX_Size() int {
	return m.Size()
}
func (m *TxOut) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOut.DiscardUnknown(m)
}

var xxx_messageInfo_TxOut proto.InternalMessageInfo

func (m *TxOut) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TxOut) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *TxOut) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TxOut) GetRaw() Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *TxOut) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TxOut) GetMetric() map[string]float64 {
	if m != nil {
		return m.Metric
	}
	return nil
}

func init() {
	proto.RegisterEnum("blocc.BlockInclude", BlockInclude_name, BlockInclude_value)
	proto.RegisterEnum("blocc.TxInclude", TxInclude_name, TxInclude_value)
	proto.RegisterType((*BlockHeader)(nil), "blocc.BlockHeader")
	proto.RegisterType((*Block)(nil), "blocc.Block")
	proto.RegisterMapType((map[string]string)(nil), "blocc.Block.DataEntry")
	proto.RegisterMapType((map[string]float64)(nil), "blocc.Block.MetricEntry")
	proto.RegisterType((*Tx)(nil), "blocc.Tx")
	proto.RegisterMapType((map[string]string)(nil), "blocc.Tx.DataEntry")
	proto.RegisterMapType((map[string]float64)(nil), "blocc.Tx.MetricEntry")
	proto.RegisterType((*TxIn)(nil), "blocc.TxIn")
	proto.RegisterMapType((map[string]string)(nil), "blocc.TxIn.DataEntry")
	proto.RegisterMapType((map[string]float64)(nil), "blocc.TxIn.MetricEntry")
	proto.RegisterType((*TxOut)(nil), "blocc.TxOut")
	proto.RegisterMapType((map[string]string)(nil), "blocc.TxOut.DataEntry")
	proto.RegisterMapType((map[string]float64)(nil), "blocc.TxOut.MetricEntry")
}

func init() { proto.RegisterFile("blocc/blocc.proto", fileDescriptor_297e677bdf07cca5) }

var fileDescriptor_297e677bdf07cca5 = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x8f, 0xdb, 0xc4,
	0x17, 0xcf, 0x38, 0xce, 0x0f, 0x3f, 0x27, 0x5d, 0xef, 0x64, 0x77, 0xeb, 0xef, 0x7e, 0x85, 0x9d,
	0x46, 0x42, 0xa4, 0x2b, 0x9a, 0xa0, 0x72, 0x00, 0x7a, 0x0c, 0x45, 0x62, 0x0f, 0xa8, 0x92, 0xc9,
	0x09, 0x0e, 0xab, 0x89, 0x3d, 0xcd, 0x9a, 0x4d, 0xec, 0x28, 0x19, 0x77, 0x93, 0x1e, 0x10, 0xfc,
	0x07, 0x1c, 0x39, 0x22, 0x4e, 0xfc, 0x17, 0x5c, 0x39, 0xee, 0xb1, 0x02, 0x29, 0x62, 0xbd, 0x12,
	0x42, 0x39, 0xf5, 0xcc, 0x09, 0xf9, 0x8d, 0x6b, 0x3b, 0x5b, 0x21, 0x28, 0x20, 0xb1, 0x97, 0x64,
	0xde, 0xe7, 0x7d, 0xe6, 0xbd, 0x37, 0xef, 0x7d, 0x3c, 0x36, 0xec, 0x8e, 0x26, 0xa1, 0xeb, 0xf6,
	0xf1, 0xb7, 0x37, 0x9b, 0x87, 0x22, 0xa4, 0x15, 0x34, 0x0e, 0xef, 0x8d, 0x7d, 0x71, 0x1a, 0x8d,
	0x7a, 0x6e, 0x38, 0xed, 0x8f, 0xc3, 0x71, 0xd8, 0x47, 0xef, 0x28, 0x7a, 0x8c, 0x16, 0x1a, 0xb8,
	0x92, 0xbb, 0x3a, 0xdf, 0x12, 0xd0, 0x07, 0x93, 0xd0, 0x3d, 0xfb, 0x90, 0x33, 0x8f, 0xcf, 0xe9,
	0x01, 0x54, 0x17, 0xab, 0xe9, 0x28, 0x9c, 0x98, 0xa4, 0x4d, 0xba, 0x9a, 0x93, 0x5a, 0xf4, 0x7f,
	0x50, 0x4f, 0xe2, 0x9f, 0x9d, 0xf8, 0x9e, 0xa9, 0xa0, 0xa7, 0x86, 0xf6, 0xb1, 0x47, 0x3b, 0x50,
	0x3d, 0xe5, 0xfe, 0xf8, 0x54, 0x98, 0xe5, 0x36, 0xe9, 0x96, 0x07, 0xb0, 0x59, 0xdb, 0x29, 0xe2,
	0xa4, 0xff, 0xb4, 0x03, 0xcd, 0xd9, 0x9c, 0x3f, 0x39, 0xc9, 0x62, 0xa8, 0x18, 0x43, 0x4f, 0xc0,
	0x41, 0x1a, 0x87, 0x82, 0x2a, 0xfc, 0x29, 0x37, 0x2b, 0x49, 0x14, 0x07, 0xd7, 0x0f, 0xd4, 0xaf,
	0xbf, 0xb1, 0x4b, 0x9d, 0x5f, 0x54, 0xa8, 0x20, 0xeb, 0xbf, 0x2c, 0xaf, 0x03, 0xcd, 0x80, 0x2f,
	0x45, 0xce, 0xa9, 0x48, 0x4e, 0x02, 0x5e, 0x3f, 0x42, 0x35, 0x3f, 0x42, 0x52, 0x9a, 0x58, 0x9e,
	0xb8, 0x61, 0x14, 0x08, 0xb3, 0x86, 0x78, 0x4d, 0x2c, 0xdf, 0x4f, 0x4c, 0x7a, 0x07, 0xd4, 0x85,
	0xff, 0x94, 0x9b, 0x75, 0x2c, 0xac, 0x19, 0xaf, 0x6d, 0x0d, 0x23, 0x7d, 0xec, 0x3f, 0xe5, 0x0e,
	0xba, 0xf0, 0xc0, 0x82, 0x89, 0x68, 0x61, 0x6a, 0xe9, 0x81, 0xd1, 0xa2, 0x3d, 0x00, 0x3f, 0x70,
	0xc3, 0xe9, 0x6c, 0xc2, 0x05, 0x37, 0xa1, 0x4d, 0xba, 0xf5, 0xc1, 0xad, 0xcd, 0xda, 0x2e, 0xa0,
	0x4e, 0x61, 0x4d, 0xdb, 0x50, 0x15, 0xcb, 0x13, 0xdf, 0x5b, 0x98, 0x7a, 0xbb, 0xdc, 0xd5, 0x06,
	0xda, 0x66, 0x6d, 0x57, 0x10, 0x71, 0x2a, 0x62, 0x79, 0xec, 0x2d, 0xe8, 0x11, 0x94, 0xe7, 0xec,
	0xdc, 0x6c, 0xb6, 0x49, 0xb7, 0x31, 0x30, 0x37, 0x6b, 0xbb, 0x39, 0x67, 0xe7, 0x6f, 0x86, 0x53,
	0x5f, 0xf0, 0xe9, 0x4c, 0xac, 0x7e, 0x5b, 0xdb, 0x65, 0x87, 0x9d, 0x3b, 0x09, 0x89, 0x1e, 0x81,
	0xea, 0x31, 0xc1, 0xcc, 0x5b, 0xed, 0x72, 0x57, 0xbf, 0x7f, 0xd0, 0x93, 0x3a, 0xc4, 0xda, 0x7b,
	0x0f, 0x99, 0x60, 0x1f, 0x04, 0x62, 0xbe, 0x72, 0x90, 0x43, 0xdf, 0x82, 0xea, 0x94, 0x8b, 0xb9,
	0xef, 0x9a, 0x3b, 0xc8, 0x36, 0xb7, 0xd8, 0x1f, 0xa1, 0x4b, 0xf2, 0x53, 0xde, 0xe1, 0x3b, 0xa0,
	0x65, 0x41, 0xa8, 0x01, 0xe5, 0x33, 0xbe, 0x4a, 0xc7, 0x9d, 0x2c, 0xe9, 0x1e, 0x54, 0x9e, 0xb0,
	0x49, 0xc4, 0xd3, 0x41, 0x4b, 0xe3, 0x81, 0xf2, 0x2e, 0x39, 0x7c, 0x0f, 0xf4, 0x42, 0xbc, 0x3f,
	0xdb, 0x4a, 0x0a, 0x5b, 0x53, 0xa1, 0x7d, 0xaf, 0x82, 0x32, 0x5c, 0xfe, 0x1d, 0x95, 0xdd, 0x81,
	0x86, 0x74, 0x15, 0xb5, 0xe6, 0xe8, 0x23, 0xf9, 0x68, 0xa1, 0xc8, 0x5e, 0x03, 0x90, 0x14, 0x94,
	0x88, 0x8a, 0x04, 0x0d, 0x91, 0x61, 0xa2, 0x93, 0x16, 0xc8, 0x79, 0xa4, 0xba, 0x52, 0x93, 0xa9,
	0x24, 0x95, 0xa4, 0x01, 0xa5, 0xa4, 0x5e, 0x08, 0xf6, 0x85, 0xd0, 0x6a, 0x05, 0xa1, 0x59, 0xa9,
	0x9a, 0x34, 0x29, 0xf3, 0x78, 0x6d, 0x57, 0x87, 0xcb, 0x82, 0x94, 0x5e, 0x55, 0x32, 0xff, 0x07,
	0xc5, 0x0f, 0x50, 0x2e, 0xfa, 0x7d, 0x3d, 0x1d, 0xda, 0x70, 0x79, 0x1c, 0x38, 0x8a, 0x1f, 0x50,
	0x0b, 0xca, 0x61, 0x24, 0xcc, 0x06, 0x7a, 0x1b, 0x99, 0xf7, 0x51, 0x24, 0x9c, 0xc4, 0xf1, 0x4a,
	0x6a, 0x7a, 0x63, 0x4b, 0x4d, 0xad, 0x2c, 0xd8, 0x4b, 0x52, 0xba, 0x77, 0x4d, 0x4a, 0xfb, 0x39,
	0xf5, 0x86, 0xe8, 0xa8, 0xf3, 0x93, 0x02, 0x6a, 0xd2, 0xa4, 0x7c, 0x9c, 0xa4, 0x30, 0xce, 0xfc,
	0x2e, 0x52, 0xfe, 0xf0, 0x2e, 0x4a, 0x3b, 0x9b, 0x08, 0xe8, 0x1f, 0x77, 0xf6, 0xee, 0x56, 0x67,
	0xf7, 0x0b, 0x43, 0x7c, 0xa9, 0xb7, 0xfd, 0x6b, 0xbd, 0xbd, 0x5d, 0x24, 0xdf, 0x94, 0xee, 0xfe,
	0xa8, 0x40, 0x05, 0x5b, 0x81, 0x0f, 0xc0, 0x6a, 0xc6, 0xb3, 0xee, 0xae, 0x66, 0x9c, 0xde, 0x05,
	0x8d, 0x79, 0xde, 0x9c, 0x2f, 0x16, 0x7c, 0x61, 0x2a, 0x78, 0xcd, 0xe9, 0x9b, 0xb5, 0x5d, 0x4b,
	0x41, 0x27, 0xf7, 0xe6, 0x29, 0xe4, 0x73, 0x2a, 0x8d, 0x7f, 0xe1, 0x0a, 0xc4, 0xe2, 0xfe, 0xf2,
	0x15, 0x28, 0xd9, 0x37, 0xa4, 0xb9, 0x47, 0x5f, 0x12, 0x68, 0xc8, 0x17, 0x59, 0xe0, 0x4e, 0x22,
	0x8f, 0xd3, 0xdb, 0xd0, 0x2a, 0xda, 0x0f, 0xf9, 0x63, 0x16, 0x4d, 0x84, 0x51, 0xa2, 0x07, 0x40,
	0x8b, 0x0e, 0xf9, 0xe9, 0x60, 0x10, 0xba, 0x07, 0xc6, 0xd6, 0x06, 0x26, 0x98, 0xa1, 0xd0, 0x16,
	0xec, 0x14, 0x51, 0x87, 0x9d, 0x1b, 0x2a, 0xdd, 0x87, 0xdd, 0x22, 0x38, 0x4c, 0x5e, 0x41, 0x46,
	0xfd, 0xe8, 0x73, 0xd0, 0x12, 0xc1, 0xc9, 0xfc, 0x7b, 0x60, 0x64, 0x46, 0x9e, 0xbc, 0x05, 0x3b,
	0x19, 0x9a, 0x65, 0xde, 0x85, 0x66, 0x4e, 0x95, 0x69, 0x0d, 0x68, 0x64, 0x90, 0xcc, 0xb9, 0x03,
	0x7a, 0x86, 0x1c, 0x07, 0x46, 0x7d, 0x8b, 0xf2, 0x28, 0x12, 0x86, 0x31, 0xf8, 0xf4, 0xe2, 0xd2,
	0x2a, 0x3d, 0xbb, 0xb4, 0x4a, 0xcf, 0x2f, 0x2d, 0xf2, 0x45, 0x6c, 0x91, 0xef, 0x62, 0x8b, 0xfc,
	0x10, 0x5b, 0xe4, 0x22, 0xb6, 0xc8, 0xcf, 0xb1, 0x45, 0x7e, 0x8d, 0xad, 0xd2, 0xf3, 0xd8, 0x22,
	0x5f, 0x5d, 0x59, 0xa5, 0x8b, 0x2b, 0xab, 0xf4, 0xec, 0xca, 0x2a, 0x7d, 0xf2, 0xfa, 0xd8, 0x17,
	0x3d, 0x37, 0xf4, 0x83, 0xc0, 0x0f, 0x3e, 0x63, 0xbd, 0x80, 0x8b, 0xfe, 0x88, 0xb9, 0x67, 0x3c,
	0xf0, 0xfa, 0x85, 0xef, 0xb4, 0x51, 0x15, 0x3f, 0xb9, 0xde, 0xfe, 0x3d, 0x00, 0x00, 0xff, 0xff,
	0x38, 0xf4, 0xfe, 0x42, 0xbd, 0x09, 0x00, 0x00,
}

func (x BlockInclude) String() string {
	s, ok := BlockInclude_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TxInclude) String() string {
	s, ok := TxInclude_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BlockHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlockHeader)
	if !ok {
		that2, ok := that.(BlockHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.BlockId != that1.BlockId {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.PrevBlockId != that1.PrevBlockId {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *Block) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Block)
	if !ok {
		that2, ok := that.(Block)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.BlockId != that1.BlockId {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.PrevBlockId != that1.PrevBlockId {
		return false
	}
	if this.NextBlockId != that1.NextBlockId {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.TxCount != that1.TxCount {
		return false
	}
	if this.BlockSize != that1.BlockSize {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Incomplete != that1.Incomplete {
		return false
	}
	if len(this.TxIds) != len(that1.TxIds) {
		return false
	}
	for i := range this.TxIds {
		if this.TxIds[i] != that1.TxIds[i] {
			return false
		}
	}
	if !bytes.Equal(this.Raw, that1.Raw) {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if this.Metric[i] != that1.Metric[i] {
			return false
		}
	}
	return true
}
func (this *Tx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tx)
	if !ok {
		that2, ok := that.(Tx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if this.BlockId != that1.BlockId {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.BlockTime != that1.BlockTime {
		return false
	}
	if this.TxId != that1.TxId {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.TxSize != that1.TxSize {
		return false
	}
	if this.Incomplete != that1.Incomplete {
		return false
	}
	if len(this.In) != len(that1.In) {
		return false
	}
	for i := range this.In {
		if !this.In[i].Equal(that1.In[i]) {
			return false
		}
	}
	if len(this.Out) != len(that1.Out) {
		return false
	}
	for i := range this.Out {
		if !this.Out[i].Equal(that1.Out[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Raw, that1.Raw) {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if this.Metric[i] != that1.Metric[i] {
			return false
		}
	}
	return true
}
func (this *TxIn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxIn)
	if !ok {
		that2, ok := that.(TxIn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TxId != that1.TxId {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if !this.Out.Equal(that1.Out) {
		return false
	}
	if !bytes.Equal(this.Raw, that1.Raw) {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if this.Metric[i] != that1.Metric[i] {
			return false
		}
	}
	return true
}
func (this *TxOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxOut)
	if !ok {
		that2, ok := that.(TxOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.Raw, that1.Raw) {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if this.Metric[i] != that1.Metric[i] {
			return false
		}
	}
	return true
}
func (this *BlockHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&blocc.BlockHeader{")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "BlockId: "+fmt.Sprintf("%#v", this.BlockId)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "PrevBlockId: "+fmt.Sprintf("%#v", this.PrevBlockId)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Block) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&blocc.Block{")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "BlockId: "+fmt.Sprintf("%#v", this.BlockId)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "PrevBlockId: "+fmt.Sprintf("%#v", this.PrevBlockId)+",\n")
	s = append(s, "NextBlockId: "+fmt.Sprintf("%#v", this.NextBlockId)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "TxCount: "+fmt.Sprintf("%#v", this.TxCount)+",\n")
	s = append(s, "BlockSize: "+fmt.Sprintf("%#v", this.BlockSize)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Incomplete: "+fmt.Sprintf("%#v", this.Incomplete)+",\n")
	s = append(s, "TxIds: "+fmt.Sprintf("%#v", this.TxIds)+",\n")
	s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	keysForMetric := make([]string, 0, len(this.Metric))
	for k, _ := range this.Metric {
		keysForMetric = append(keysForMetric, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetric)
	mapStringForMetric := "map[string]float64{"
	for _, k := range keysForMetric {
		mapStringForMetric += fmt.Sprintf("%#v: %#v,", k, this.Metric[k])
	}
	mapStringForMetric += "}"
	if this.Metric != nil {
		s = append(s, "Metric: "+mapStringForMetric+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&blocc.Tx{")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "BlockId: "+fmt.Sprintf("%#v", this.BlockId)+",\n")
	s = append(s, "BlockHeight: "+fmt.Sprintf("%#v", this.BlockHeight)+",\n")
	s = append(s, "BlockTime: "+fmt.Sprintf("%#v", this.BlockTime)+",\n")
	s = append(s, "TxId: "+fmt.Sprintf("%#v", this.TxId)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "TxSize: "+fmt.Sprintf("%#v", this.TxSize)+",\n")
	s = append(s, "Incomplete: "+fmt.Sprintf("%#v", this.Incomplete)+",\n")
	if this.In != nil {
		s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	}
	if this.Out != nil {
		s = append(s, "Out: "+fmt.Sprintf("%#v", this.Out)+",\n")
	}
	s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	keysForMetric := make([]string, 0, len(this.Metric))
	for k, _ := range this.Metric {
		keysForMetric = append(keysForMetric, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetric)
	mapStringForMetric := "map[string]float64{"
	for _, k := range keysForMetric {
		mapStringForMetric += fmt.Sprintf("%#v: %#v,", k, this.Metric[k])
	}
	mapStringForMetric += "}"
	if this.Metric != nil {
		s = append(s, "Metric: "+mapStringForMetric+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TxIn) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&blocc.TxIn{")
	s = append(s, "TxId: "+fmt.Sprintf("%#v", this.TxId)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	if this.Out != nil {
		s = append(s, "Out: "+fmt.Sprintf("%#v", this.Out)+",\n")
	}
	s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	keysForMetric := make([]string, 0, len(this.Metric))
	for k, _ := range this.Metric {
		keysForMetric = append(keysForMetric, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetric)
	mapStringForMetric := "map[string]float64{"
	for _, k := range keysForMetric {
		mapStringForMetric += fmt.Sprintf("%#v: %#v,", k, this.Metric[k])
	}
	mapStringForMetric += "}"
	if this.Metric != nil {
		s = append(s, "Metric: "+mapStringForMetric+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TxOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&blocc.TxOut{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Addresses: "+fmt.Sprintf("%#v", this.Addresses)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	keysForMetric := make([]string, 0, len(this.Metric))
	for k, _ := range this.Metric {
		keysForMetric = append(keysForMetric, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetric)
	mapStringForMetric := "map[string]float64{"
	for _, k := range keysForMetric {
		mapStringForMetric += fmt.Sprintf("%#v: %#v,", k, this.Metric[k])
	}
	mapStringForMetric += "}"
	if this.Metric != nil {
		s = append(s, "Metric: "+mapStringForMetric+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBlocc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if len(m.BlockId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.BlockId)))
		i += copy(dAtA[i:], m.BlockId)
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Height))
	}
	if len(m.PrevBlockId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.PrevBlockId)))
		i += copy(dAtA[i:], m.PrevBlockId)
	}
	if m.Time != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if len(m.BlockId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.BlockId)))
		i += copy(dAtA[i:], m.BlockId)
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Height))
	}
	if len(m.PrevBlockId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.PrevBlockId)))
		i += copy(dAtA[i:], m.PrevBlockId)
	}
	if len(m.NextBlockId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.NextBlockId)))
		i += copy(dAtA[i:], m.NextBlockId)
	}
	if m.Time != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Time))
	}
	if m.TxCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.TxCount))
	}
	if m.BlockSize != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.BlockSize))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.Incomplete {
		dAtA[i] = 0x50
		i++
		if m.Incomplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.TxIds) > 0 {
		for _, s := range m.TxIds {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Raw) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x72
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + len(v) + sovBlocc(uint64(len(v)))
			i = encodeVarintBlocc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Metric) > 0 {
		for k, _ := range m.Metric {
			dAtA[i] = 0x7a
			i++
			v := m.Metric[k]
			mapSize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + 8
			i = encodeVarintBlocc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x11
			i++
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i += 8
		}
	}
	return i, nil
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if len(m.BlockId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.BlockId)))
		i += copy(dAtA[i:], m.BlockId)
	}
	if m.BlockHeight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.BlockHeight))
	}
	if m.BlockTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.BlockTime))
	}
	if len(m.TxId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.TxId)))
		i += copy(dAtA[i:], m.TxId)
	}
	if m.Height != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Height))
	}
	if m.Time != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Time))
	}
	if m.TxSize != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.TxSize))
	}
	if m.Incomplete {
		dAtA[i] = 0x50
		i++
		if m.Incomplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.In) > 0 {
		for _, msg := range m.In {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Out) > 0 {
		for _, msg := range m.Out {
			dAtA[i] = 0x62
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Raw) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x72
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + len(v) + sovBlocc(uint64(len(v)))
			i = encodeVarintBlocc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Metric) > 0 {
		for k, _ := range m.Metric {
			dAtA[i] = 0x7a
			i++
			v := m.Metric[k]
			mapSize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + 8
			i = encodeVarintBlocc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x11
			i++
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i += 8
		}
	}
	return i, nil
}

func (m *TxIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxIn) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.TxId)))
		i += copy(dAtA[i:], m.TxId)
	}
	if m.Height != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Height))
	}
	if m.Out != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Out.Size()))
		n1, err := m.Out.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Raw) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x72
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + len(v) + sovBlocc(uint64(len(v)))
			i = encodeVarintBlocc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Metric) > 0 {
		for k, _ := range m.Metric {
			dAtA[i] = 0x7a
			i++
			v := m.Metric[k]
			mapSize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + 8
			i = encodeVarintBlocc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x11
			i++
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i += 8
		}
	}
	return i, nil
}

func (m *TxOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOut) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(m.Value))
	}
	if len(m.Raw) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBlocc(dAtA, i, uint64(len(m.Raw)))
		i += copy(dAtA[i:], m.Raw)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x72
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + len(v) + sovBlocc(uint64(len(v)))
			i = encodeVarintBlocc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Metric) > 0 {
		for k, _ := range m.Metric {
			dAtA[i] = 0x7a
			i++
			v := m.Metric[k]
			mapSize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + 8
			i = encodeVarintBlocc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBlocc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x11
			i++
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i += 8
		}
	}
	return i, nil
}

func encodeVarintBlocc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlocc(uint64(m.Height))
	}
	l = len(m.PrevBlockId)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovBlocc(uint64(m.Time))
	}
	return n
}

func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlocc(uint64(m.Height))
	}
	l = len(m.PrevBlockId)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	l = len(m.NextBlockId)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovBlocc(uint64(m.Time))
	}
	if m.TxCount != 0 {
		n += 1 + sovBlocc(uint64(m.TxCount))
	}
	if m.BlockSize != 0 {
		n += 1 + sovBlocc(uint64(m.BlockSize))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if m.Incomplete {
		n += 2
	}
	if len(m.TxIds) > 0 {
		for _, s := range m.TxIds {
			l = len(s)
			n += 1 + l + sovBlocc(uint64(l))
		}
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + len(v) + sovBlocc(uint64(len(v)))
			n += mapEntrySize + 1 + sovBlocc(uint64(mapEntrySize))
		}
	}
	if len(m.Metric) > 0 {
		for k, v := range m.Metric {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovBlocc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBlocc(uint64(m.BlockHeight))
	}
	if m.BlockTime != 0 {
		n += 1 + sovBlocc(uint64(m.BlockTime))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlocc(uint64(m.Height))
	}
	if m.Time != 0 {
		n += 1 + sovBlocc(uint64(m.Time))
	}
	if m.TxSize != 0 {
		n += 1 + sovBlocc(uint64(m.TxSize))
	}
	if m.Incomplete {
		n += 2
	}
	if len(m.In) > 0 {
		for _, e := range m.In {
			l = e.Size()
			n += 1 + l + sovBlocc(uint64(l))
		}
	}
	if len(m.Out) > 0 {
		for _, e := range m.Out {
			l = e.Size()
			n += 1 + l + sovBlocc(uint64(l))
		}
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + len(v) + sovBlocc(uint64(len(v)))
			n += mapEntrySize + 1 + sovBlocc(uint64(mapEntrySize))
		}
	}
	if len(m.Metric) > 0 {
		for k, v := range m.Metric {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovBlocc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TxIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlocc(uint64(m.Height))
	}
	if m.Out != nil {
		l = m.Out.Size()
		n += 1 + l + sovBlocc(uint64(l))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + len(v) + sovBlocc(uint64(len(v)))
			n += mapEntrySize + 1 + sovBlocc(uint64(mapEntrySize))
		}
	}
	if len(m.Metric) > 0 {
		for k, v := range m.Metric {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovBlocc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TxOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovBlocc(uint64(l))
		}
	}
	if m.Value != 0 {
		n += 1 + sovBlocc(uint64(m.Value))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovBlocc(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + len(v) + sovBlocc(uint64(len(v)))
			n += mapEntrySize + 1 + sovBlocc(uint64(mapEntrySize))
		}
	}
	if len(m.Metric) > 0 {
		for k, v := range m.Metric {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBlocc(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovBlocc(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBlocc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlocc(x uint64) (n int) {
	return sovBlocc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BlockHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockHeader{`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`BlockId:` + fmt.Sprintf("%v", this.BlockId) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`PrevBlockId:` + fmt.Sprintf("%v", this.PrevBlockId) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Block) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	keysForMetric := make([]string, 0, len(this.Metric))
	for k, _ := range this.Metric {
		keysForMetric = append(keysForMetric, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetric)
	mapStringForMetric := "map[string]float64{"
	for _, k := range keysForMetric {
		mapStringForMetric += fmt.Sprintf("%v: %v,", k, this.Metric[k])
	}
	mapStringForMetric += "}"
	s := strings.Join([]string{`&Block{`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`BlockId:` + fmt.Sprintf("%v", this.BlockId) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`PrevBlockId:` + fmt.Sprintf("%v", this.PrevBlockId) + `,`,
		`NextBlockId:` + fmt.Sprintf("%v", this.NextBlockId) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`TxCount:` + fmt.Sprintf("%v", this.TxCount) + `,`,
		`BlockSize:` + fmt.Sprintf("%v", this.BlockSize) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Incomplete:` + fmt.Sprintf("%v", this.Incomplete) + `,`,
		`TxIds:` + fmt.Sprintf("%v", this.TxIds) + `,`,
		`Raw:` + fmt.Sprintf("%v", this.Raw) + `,`,
		`Data:` + mapStringForData + `,`,
		`Metric:` + mapStringForMetric + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tx) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	keysForMetric := make([]string, 0, len(this.Metric))
	for k, _ := range this.Metric {
		keysForMetric = append(keysForMetric, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetric)
	mapStringForMetric := "map[string]float64{"
	for _, k := range keysForMetric {
		mapStringForMetric += fmt.Sprintf("%v: %v,", k, this.Metric[k])
	}
	mapStringForMetric += "}"
	s := strings.Join([]string{`&Tx{`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`BlockId:` + fmt.Sprintf("%v", this.BlockId) + `,`,
		`BlockHeight:` + fmt.Sprintf("%v", this.BlockHeight) + `,`,
		`BlockTime:` + fmt.Sprintf("%v", this.BlockTime) + `,`,
		`TxId:` + fmt.Sprintf("%v", this.TxId) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`TxSize:` + fmt.Sprintf("%v", this.TxSize) + `,`,
		`Incomplete:` + fmt.Sprintf("%v", this.Incomplete) + `,`,
		`In:` + strings.Replace(fmt.Sprintf("%v", this.In), "TxIn", "TxIn", 1) + `,`,
		`Out:` + strings.Replace(fmt.Sprintf("%v", this.Out), "TxOut", "TxOut", 1) + `,`,
		`Raw:` + fmt.Sprintf("%v", this.Raw) + `,`,
		`Data:` + mapStringForData + `,`,
		`Metric:` + mapStringForMetric + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxIn) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	keysForMetric := make([]string, 0, len(this.Metric))
	for k, _ := range this.Metric {
		keysForMetric = append(keysForMetric, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetric)
	mapStringForMetric := "map[string]float64{"
	for _, k := range keysForMetric {
		mapStringForMetric += fmt.Sprintf("%v: %v,", k, this.Metric[k])
	}
	mapStringForMetric += "}"
	s := strings.Join([]string{`&TxIn{`,
		`TxId:` + fmt.Sprintf("%v", this.TxId) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Out:` + strings.Replace(fmt.Sprintf("%v", this.Out), "TxOut", "TxOut", 1) + `,`,
		`Raw:` + fmt.Sprintf("%v", this.Raw) + `,`,
		`Data:` + mapStringForData + `,`,
		`Metric:` + mapStringForMetric + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxOut) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	keysForMetric := make([]string, 0, len(this.Metric))
	for k, _ := range this.Metric {
		keysForMetric = append(keysForMetric, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetric)
	mapStringForMetric := "map[string]float64{"
	for _, k := range keysForMetric {
		mapStringForMetric += fmt.Sprintf("%v: %v,", k, this.Metric[k])
	}
	mapStringForMetric += "}"
	s := strings.Join([]string{`&TxOut{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Addresses:` + fmt.Sprintf("%v", this.Addresses) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Raw:` + fmt.Sprintf("%v", this.Raw) + `,`,
		`Data:` + mapStringForData + `,`,
		`Metric:` + mapStringForMetric + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlocc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlocc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBlocc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlocc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextBlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incomplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Incomplete = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIds = append(m.TxIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlocc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlocc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metric == nil {
				m.Metric = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlocc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlocc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metric[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlocc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlocc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			m.BlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSize", wireType)
			}
			m.TxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Incomplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Incomplete = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.In = append(m.In, &TxIn{})
			if err := m.In[len(m.In)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Out = append(m.Out, &TxOut{})
			if err := m.Out[len(m.Out)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlocc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlocc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metric == nil {
				m.Metric = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlocc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlocc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metric[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlocc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlocc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Out == nil {
				m.Out = &TxOut{}
			}
			if err := m.Out.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlocc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlocc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metric == nil {
				m.Metric = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlocc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlocc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metric[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlocc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlocc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlocc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlocc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlocc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlocc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metric == nil {
				m.Metric = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBlocc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthBlocc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBlocc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBlocc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metric[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlocc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBlocc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlocc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlocc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlocc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlocc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBlocc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlocc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlocc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBlocc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlocc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlocc   = fmt.Errorf("proto: integer overflow")
)
